#include <tcs3200.h>
#include "Wire.h"
#include <Servo.h>
#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps20.h"

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif

MPU6050 mpu;

#define OUTPUT_READABLE_YAWPITCHROLL

#define INTERRUPT_PIN 18  // use pin 18 on Arduino Uno & most boards
#define LED_PIN 13 // (Arduino is 13, Teensy is 11, Teensy++ is 6)
bool blinkState = false;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

// packet structure for InvenSense teapot demo
uint8_t teapotPacket[14] = { '$', 0x02, 0,0, 0,0, 0,0, 0,0, 0x00, 0x00, '\r', '\n' };

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
}

float angle=ypr[0];                          // variable for angle DATA - Z Axis-

// DC motor parameters and pins
byte dcmotfpin=2;                     // output pin for FORWARD DC driving motor 
byte dcmotbpin=4;                     // output pin for BACKWARD DC driving motor 
int speedo=200;                       // speed for driving dc motor

// stearing motor parameters and pins
//byte stearRmotpin=4;                  
//byte stearLmotpin =5;               
Servo servo;
int pos = 90 ;                       // servo motor intial angle position in forward position
byte servopin = 5;                    // output pwm pin for servo stearing motor


// color sensor parameters and pins
tcs3200 rtcs(42, 40, 44, 46, 50);    // pins for RIGHT color sensor  (S0, S1, S2, S3, output pin)  
tcs3200 ltcs(32, 34, 26, 28, 30);    // pins for LEFT color sensor   (S0, S1, S2, S3, output pin)  

int red, green, blue, white;         // variables for RGB and clear color DATA

int ominred = 70, omingreen = 40, ominblue = 50, ominwhite = 120;  // parameter for minimum RGB values in orange color
int omaxred = 90, omaxgreen = 70, omaxblue = 90, omaxwhite = 200;  // parameter for maximum RGB values in orange color

int bminred = 34, bmingreen = 40, bminblue = 50, bminwhite = 142;  // parameter for minimum RGB values in blue color
int bmaxred = 55, bmaxgreen = 83, bmaxblue = 100, bmaxwhite = 166;  // parameter for maximum RGB values in blue color

//bool cw=false,ccw=false, intcolor=true;

int cornerlinecount=1;                // count corner line for achivie 3 laps   if counter= 12 then 3 laps              
bool center=false;
bool enLcolor = true, enRcolor = true ;


// start button parameters and pins
byte startpin=37;                     // input pin for start push button
byte startsignal;                     // DATA from button - HIGH or LOW-

// ultrasonic sensor parameters and pins
#define fecho 46                      // input echo pin for FORWARD ultrasonic
#define ftrig 48                      // output trig pin for FORWARD ultrasonic

#define recho 9                     // input echo pin for RIGHT ultrasonic
#define rtrig 8                     // output trig pin for RIGHT ultrasonic

#define lecho 6                      // input echo pin for LEFT ultrasonic
#define ltrig 7                      // output trig pin for LEFT ultrasonic

#define brecho 10 //31                     // input echo pin for BACKRIGHT ultrasonic
#define brtrig 11 //30                      // output trig pin for BACKRIGHT ultrasonic

#define blecho 50 //53                      // input echo pin for BACKLEFT ultrasonic
#define bltrig 52 //52                      // output trig pin for BACKLEFT ultrasonic

int fdistance,rdistance,ldistance;
int intfdistance,intrdistance,intldistance;
bool intdistance=true;
long duration;

char pioutput;   

int lap = 1;

int minf=intfdistance-10;
int maxf=intfdistance+10;
int minr=intrdistance-10;
int maxr=intrdistance+10;
int minl=intldistance-10;
int maxl=intldistance+10;

void setup() 
{
  Serial.begin(115200);
  Wire.begin();
  //mpusetup();                              // GYRO needs to be replaced to be useable ...
  delay(1000);
  //pinMode(24,OUTPUT);                      // left color sensor enable
  //pinMode(48,OUTPUT);                      // right color sensor enable
  //digitalWrite(48,LOW);
  //digitalWrite(24,LOW);
  pinMode(ftrig, OUTPUT); 
  pinMode(fecho, INPUT);
  pinMode(rtrig, OUTPUT); 
  pinMode(recho, INPUT);
  pinMode(ltrig, OUTPUT); 
  pinMode(lecho, INPUT);
  pinMode(dcmotfpin, OUTPUT);
  pinMode(dcmotbpin, OUTPUT);
  digitalWrite(dcmotfpin,LOW);
  digitalWrite(dcmotbpin,LOW);
  servo.attach(servopin);
  servo.write(pos);
  intdistance = true;
  readdistance(ftrig, fecho, 'F');
  delay(50);
  readdistance(rtrig, recho, 'R');
  delay(50);
  readdistance(ltrig, lecho, 'L');
  Serial.print("intfdis= ");
  Serial.println(intfdistance);
  delay(500);
  Serial.print("intrdis= ");
  Serial.println(intrdistance);
  delay(500);
  Serial.print("intldis= ");
  Serial.println(intldistance);
  while(true)
  {
    startsignal=digitalRead(startpin);
    if(startsignal == HIGH)
    {
      break;
    }
  }
}


void loop()
{
  // fnS: readdistance(trigPin, echoPin, 'F' || 'R' || 'L')
  // fnS: forward(int speedo), backward(int speedo), left(), right()
  straight();
  forward(200);
  while(true)
  {
    readdistance(rtrig, recho, 'R');
    delay(10);
    readdistance(ftrig, fecho, 'F');
    if( (fdistance < 83)  &&  (rdistance > 65))
    {
      lap++;
      Serial.print("lap = ");
      Serial.println(lap);
      while(true)
      {
        right();
        if(lap == 13)
        {  
          while(true)
          {
            right();
            if(pioutput = "A" || pioutput = "B") // A = red pillars on the right // B = red pillars on the middle.
            {
              while(true)
              {
                right();
                if(pioutput = "C")               // C = red pillars on the left.
                {
                  straight();
                  forward(200);
                  readdistance(ltrig, lecho, 'L');
                  if(ldistance < 15)
                  {
                    delay(100);
                    left();
                    readdistance(bltrig, blecho, 'N');
                    if(bldistance < 15)
                    {
                      left();
                      delay(100);
                      straight();
                      while(true)
                      {
                        straight();
                        delay(10);
                        forward(200);
                        readul();
                        if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
                        {
                          while(true)
                          {
                            //delay(100);
                            stopdriving();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if(pioutput = "F" || pioutput = "E") // F = green pillars on the left // green pillars on the middle.
            {
              while(true)
              {
                left();
                if(pioutput = "D")               // D = green pillars on the right.
                {
                  straight();
                  forward(200);
                  readdistance(rtrig, recho, 'R');
                  if(rdistance < 15)
                  {
                    delay(100);
                    right();
                    readdistance(brtrig, brecho, 'M');
                    if(brdistance < 15)
                    {
                      right();
                      delay(100);
                      straight();
                      while(true)
                      {
                        straight();
                        delay(10);
                        forward(200);
                        readul();
                        if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
                        {
                          while(true)
                          {
                            //delay(100);
                            stopdriving();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if((pioutput = "C") || (pioutput = "D")) // C = red pillars on the left // D = green pillars on the right.
            {
              straight();
              delay(10);
              forward(200);
              readul();
              if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
              {
                while(true)
                {
                  //delay(100);
                  stopdriving();
                }
              }
            }
            /*else
            {
              while(true)
              {
                straight();
                delay(10);
                forward(200);
                readul();
                if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
                {
                  while(true)
                  {
                    //delay(100);
                    stopdriving();
                  }
                }
              }
            }*/
          }
        }
        break;
      }
    }
    readdistance(ltrig, lecho, 'L');
    delay(10);
    readdistance(ftrig, fecho, 'F');
    if(fdistance < 83  &&  ldistance > 65)
    {
      lap++;
      Serial.print("lap = ");
      Serial.println(lap);
      while(true)
      {
        left();
        if(lap == 13)
        { 
          while(true)
          {
            left();
            if(pioutput = "A" || pioutput = "B") // A = red pillars on the right // B = red pillars on the middle.
            {
              while(true)
              {
                right();
                if(pioutput = "C")               // C = red pillars on the left.
                {
                  straight();
                  forward(200);
                  readdistance(ltrig, lecho, 'L');
                  if(ldistance < 15)
                  {
                    delay(100);
                    left();
                    readdistance(bltrig, blecho, 'N');
                    if(bldistance < 15)
                    {
                      left();
                      delay(100);
                      straight();
                      while(true)
                      {
                        straight();
                        delay(10);
                        forward(200);
                        readul();
                        if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
                        {
                          while(true)
                          {
                            //delay(100);
                            stopdriving();
                            //break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if(pioutput = "F" || pioutput = "E") // F = green pillars on the left // green pillars on the middle.
            {
              while(true)
              {
                left();
                if(pioutput = "D")               // D = green pillars on the right.
                {
                  straight();
                  forward(200);
                  readdistance(rtrig, recho, 'R');
                  if(rdistance < 15)
                  {
                    delay(100);
                    right();
                    readdistance(brtrig, brecho, 'M');
                    if(brdistance < 15)
                    {
                      right();
                      delay(100);
                      straight();
                      while(true)
                      {
                        straight();
                        delay(10);
                        forward(200);
                        readul();
                        if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
                        {
                          while(true)
                          {
                            //delay(100);
                            stopdriving();
                            //break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if((pioutput = "C") || (pioutput = "D")) // C = red pillars on the left // D = green pillars on the right.
            {
              straight();
              delay(10);
              forward(200);
              readul();
              if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
              {
                while(true)
                {
                  //delay(100);
                  stopdriving();
                  //break;
                }
              }
            }
            /*else
            {
              while(true)
              {
                straight();
                delay(10);
                forward(200);
                readul();
                if(minf < intfdistance < maxf && minr < intrdistance < maxr && minl < intldistance < maxl )
                {
                  while(true)
                  {
                    //delay(100);
                    stopdriving();
                  }
                }
              }
            }*/
          }
        }
        break;
      }
    }

    
    if(pioutput = "A" || pioutput = "B") // A = red pillars on the right // B = red pillars on the middle.
    {
      while(true)
      {
        right();
        if(pioutput = "C")               // C = red pillars on the left.
        {
          straight();
          forward(200);
          readdistance(ltrig, lecho, 'L');
          if(ldistance < 15)
          {
            delay(100);
            left();
            readdistance(bltrig, blecho, 'N');
            if(bldistance < 15)
            {
              left();
              delay(100);
              straight();
              //break;
            }
          }
        }
      }
    }

    if(pioutput = "F" || pioutput = "E") // F = green pillars on the left // green pillars on the middle.
    {
      while(true)
      {
        left();
        if(pioutput = "D")               // D = green pillars on the right.
        {
          straight();
          forward(200);
          readdistance(rtrig, recho, 'R');
          if(rdistance < 15)
          {
            delay(100);
            right();
            readdistance(brtrig, brecho, 'M');
            if(brdistance < 15)
            {
              right();
              delay(100);
              straight();
              //break;
            }
          }
        }
      }
    }
    if((pioutput = "C") || (pioutput = "D")) // C = red pillars on the left // D = green pillars on the right.
    {
      straight();
      delay(10);
      forward(200);
      //break;
    }
    break;
  }
}


void readdistance(int trigPin, int echoPin, char u)
{
  
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  if(u=='F')
  {
    fdistance = duration * 0.034 / 2;
    if(intdistance == true)
    {
      intfdistance = duration * 0.034 / 2;
     // intdistance = false;
    }
  }
  if(u=='R')
  {
    rdistance = duration * 0.034 / 2 ;
    if(intdistance == true)
    {
      intrdistance = duration * 0.034 / 2;
     // intdistance = false;
    }
  }
  if(u=='L')
  {
    ldistance = duration * 0.034 / 2;
    if( intdistance == true)
    {
      intldistance = duration * 0.034 / 2;
      intdistance = false;
    }
  }

}

void readul()
{
  readdistance(ftrig, fecho, 'F');
  delay(10);
  readdistance(rtrig, recho, 'R');
  delay(10);
  readdistance(ltrig, lecho, 'L');
}

void straight()
{
  pos= 90;
  servo.write(pos);
}

void right()
{
  pos=140;
  servo.write(pos);
}

void left()
{
  pos=50;
  servo.write(pos);
}

void stopdriving()
{
  digitalWrite(dcmotfpin,LOW);
  digitalWrite(dcmotbpin,LOW);
}

void backward(int speedo)
{
  analogWrite(dcmotbpin,speedo);
  digitalWrite(dcmotfpin,LOW);
}

void forward(int speedo)
{
  //digitalWrite(dcmotfpin,HIGH); // moving FORWARD
  analogWrite(dcmotfpin,speedo);
  digitalWrite(dcmotbpin,LOW);
  //delay(500);
  //digitalWrite(dcmotfpin,LOW);
  //digitalWrite(dcmotbpin,LOW);
}

                                   //////color sensors deleted:
/*
void readRcolor()
{
  red = rtcs.colorRead('r');
  Serial.print("R= ");
  Serial.print(red);
  Serial.print("        ");
  //delay(5);
  green = rtcs.colorRead('g');
  /*Serial.print("G= ");
  Serial.print(green);
  Serial.print("        ");
  //delay(5);
  blue = rtcs.colorRead('b');
  /*Serial.print("B= ");
  Serial.print(blue);
  Serial.print("        ");
  //delay(5);
  white = rtcs.colorRead('c');
  /*Serial.print("c= ");
  Serial.println(white);
  //delay(5);
  if(ominred <= red && red <= omaxred && omingreen <= green && green <= omaxgreen && ominblue <= blue && blue <= omaxblue)
  {
    Serial.println("orange line detected. clock wise direction");
    cw=true;
    ccw=false;
    cornerlinecount++;
    Serial.println('linecount=', cornerlinecount)
    intcolor=false;
  }
  //else
  //Serial.println("go forward");

}

void readLcolor()
{
  red = ltcs.colorRead('r');
  /*Serial.print("R= ");
  Serial.print(red);
  Serial.print("        ");
  //delay(5);
  green = ltcs.colorRead('g');
  /*Serial.print("G= ");
  Serial.print(green);
  Serial.print("        ");
  //delay(5);
  blue = ltcs.colorRead('b');
  /*Serial.print("B= ");
  Serial.print(blue);
  Serial.print("        ");
  //delay(5);
  white = ltcs.colorRead('c');
  /*Serial.print("c= ");
  Serial.println(white);
  //delay(5);
  if(bminred <= red && red <= bmaxred && bmingreen <= green && green <= bmaxgreen && bminblue <= blue && blue <= bmaxblue)
  {
    Serial.println("blue detected. counter clock wise direction");
    ccw=true;
    cw=false;
    cornerlinecount++;
    intcolor=false;
  }
  //else
  //Serial.println("go forward");
}
*/


void mpusetup()
{
  #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
        Wire.setClock(400000); // 400kHz I2C clock. Comment this line if having compilation difficulties
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif


    Serial.begin(115200);
    while (!Serial); 

    
    Serial.println(F("Initializing I2C devices..."));
    mpu.initialize();
    pinMode(INTERRUPT_PIN, INPUT);

    // verify connection
    Serial.println(F("Testing device connections..."));
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

    // wait for ready
    /*Serial.println(F("\nSend any character to begin DMP programming and demo: "));
    while (Serial.available() && Serial.read()); // empty buffer
    while (!Serial.available());                 // wait for data
    while (Serial.available() && Serial.read()); // empty buffer again*/

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    devStatus = mpu.dmpInitialize();

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // Calibration Time: generate offsets and calibrate our MPU6050
        mpu.CalibrateAccel(6);
        mpu.CalibrateGyro(6);
        mpu.PrintActiveOffsets();
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // enable Arduino interrupt detection
        Serial.print(F("Enabling interrupt detection (Arduino external interrupt "));
        Serial.print(digitalPinToInterrupt(INTERRUPT_PIN));
        Serial.println(F(")..."));
        attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {

        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }

    // configure LED for output
    pinMode(LED_PIN, OUTPUT);
}
